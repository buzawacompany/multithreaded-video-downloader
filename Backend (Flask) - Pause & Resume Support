import json
import os
import subprocess
import threading
import time
from flask import Flask, request, jsonify
from flask_cors import CORS
from pytube import YouTube

app = Flask(__name__)
CORS(app)

DOWNLOAD_FOLDER = "downloads"
HISTORY_FILE = "download_history.json"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

downloads = {}  # {url: {"progress": int, "file": str, "paused": bool, "thread": threading.Thread}}

# Load history
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            return json.load(f)
    return []

# Save history
def save_history(history):
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=4)

# Convert MP4 to MP3
def convert_mp4_to_mp3(mp4_file):
    mp3_file = mp4_file.replace(".mp4", ".mp3")
    command = f'ffmpeg -i "{mp4_file}" -q:a 0 -map a "{mp3_file}" -y'
    subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return mp3_file

# Function to track progress
def progress_callback(stream, chunk, bytes_remaining):
    url = stream.url
    if url in downloads:
        total_size = stream.filesize
        downloaded_size = total_size - bytes_remaining
        progress = int((downloaded_size / total_size) * 100)
        downloads[url]["progress"] = progress

# Function to download video
def download_video(url, format_type):
    try:
        yt = YouTube(url, on_progress_callback=progress_callback)
        stream = yt.streams.get_highest_resolution()
        file_name = f"{yt.title}.mp4"
        file_path = os.path.join(DOWNLOAD_FOLDER, file_name)

        downloads[url] = {"progress": 0, "file": file_path, "paused": False, "thread": None}

        with open(file_path, "wb") as f:
            for chunk in stream.stream_to_buffer():
                while downloads[url]["paused"]:  
                    time.sleep(1)  # Pause

                f.write(chunk)

        downloads[url]["progress"] = 100  # Mark as complete

        if format_type == "mp3":
            file_path = convert_mp4_to_mp3(file_path)

        history = load_history()
        history.append({"title": yt.title, "url": url, "file": file_path, "format": format_type})
        save_history(history)

    except Exception as e:
        downloads[url]["progress"] = -1  # Error
        print(f"Error: {e}")

# API to start download
@app.route("/download", methods=["POST"])
def start_download():
    data = request.json
    url = data.get("url")
    format_type = data.get("format", "mp4")

    if not url:
        return jsonify({"error": "No URL provided"}), 400

    if url in downloads and downloads[url]["progress"] < 100:
        return jsonify({"message": "Download already in progress"}), 400

    thread = threading.Thread(target=download_video, args=(url, format_type))
    downloads[url] = {"progress": 0, "file": "", "paused": False, "thread": thread}
    thread.start()

    return jsonify({"message": "Download started", "url": url})

# API to pause download
@app.route("/pause", methods=["POST"])
def pause_download():
    url = request.json.get("url")
    if url in downloads and downloads[url]["progress"] < 100:
        downloads[url]["paused"] = True
        return jsonify({"message": "Download paused"})
    return jsonify({"error": "No active download found"}), 404

# API to resume download
@app.route("/resume", methods=["POST"])
def resume_download():
    url = request.json.get("url")
    if url in downloads and downloads[url]["paused"]:
        downloads[url]["paused"] = False
        return jsonify({"message": "Download resumed"})
    return jsonify({"error": "No paused download found"}), 404

# API to check progress
@app.route("/progress", methods=["GET"])
def get_progress():
    url = request.args.get("url")
    if url in downloads:
        return jsonify({"progress": downloads[url]["progress"], "paused": downloads[url]["paused"]})
    return jsonify({"error": "No such download"}), 404

# API to get download history
@app.route("/history", methods=["GET"])
def get_history():
    return jsonify(load_history())

if __name__ == "__main__":
    app.run(debug=True, port=5000)
