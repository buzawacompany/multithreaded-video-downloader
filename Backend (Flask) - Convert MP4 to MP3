import json
import os
import subprocess
from flask import Flask, request, jsonify
from flask_cors import CORS
from pytube import YouTube
import threading

app = Flask(__name__)
CORS(app)

DOWNLOAD_FOLDER = "downloads"
HISTORY_FILE = "download_history.json"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

downloads = {}  # {url: {"progress": int, "paused": bool, "file": str}}

# Load download history from file
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            return json.load(f)
    return []

# Save download history to file
def save_history(history):
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=4)

# Function to convert MP4 to MP3
def convert_mp4_to_mp3(mp4_file):
    mp3_file = mp4_file.replace(".mp4", ".mp3")
    command = f'ffmpeg -i "{mp4_file}" -q:a 0 -map a "{mp3_file}" -y'
    subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return mp3_file

# Function to download video
def download_video(url, format_type):
    try:
        yt = YouTube(url)
        stream = yt.streams.get_highest_resolution()
        file_name = f"{yt.title}.mp4"
        file_path = os.path.join(DOWNLOAD_FOLDER, file_name)

        downloads[url] = {"progress": 0, "paused": False, "file": file_path}

        stream.download(output_path=DOWNLOAD_FOLDER, filename=file_name)
        downloads[url]["progress"] = 100  # Mark as complete

        if format_type == "mp3":
            file_path = convert_mp4_to_mp3(file_path)

        # Update history
        history = load_history()
        history.append({"title": yt.title, "url": url, "file": file_path, "format": format_type})
        save_history(history)

    except Exception as e:
        downloads[url]["progress"] = -1  # Error
        print(f"Error: {e}")

# API to start download
@app.route("/download", methods=["POST"])
def start_download():
    data = request.json
    url = data.get("url")
    format_type = data.get("format", "mp4")

    if not url:
        return jsonify({"error": "No URL provided"}), 400

    if url in downloads and downloads[url]["progress"] < 100:
        downloads[url]["paused"] = False  # Resume
    else:
        threading.Thread(target=download_video, args=(url, format_type)).start()

    return jsonify({"message": "Download started/resumed", "url": url})

# API to get download history
@app.route("/history", methods=["GET"])
def get_history():
    return jsonify(load_history())

if __name__ == "__main__":
    app.run(debug=True, port=5000)
